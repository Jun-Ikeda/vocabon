
const number1 = 1;
const number2 = 2;

export number1
export number2

import { number1, number2 } from '上のファイル'


export default number1 < いっこだけ
import Num from ''　//名前変えてもいい

export TestComponent
import { TestComponent } from ''

const object = {
    number1: 1,
    number2: 2,
    number3: 3
}

const complicatedFunction = ({ collection, id, updated, expires }) => {

}
complicatedFunction({collection: 'User', id: })

const simpleFunction = (a,b) => {
    return a - b
}
simpleFunction(3,2) 

fuction = async () = {
    const data = await firebase.firestore().get()
    console.log(data)
}



class Header extends Component {

}
全画面表示されたり、<Header />

const Nav = createSwitchNavigator({
    screenA: Nav
    screenB: Component
})

<Nav />

// ---------------------------------------------------------

// class A extends Component {
//   render() {
//     return (
//       <View>
//         <Text>This is Screen A</Text>
//         <TouchableOpacity onPress={this.gotoB}>
//           <Text>GO to B </Text>
//         </TouchableOpacity>
//       </View>
//     )
//   }
//   gotoB = () => {
//     this.props.navigation.navigate('screenB')
//   }
// }

// class B extends Component {
//   render() {
//     return (
//       <View>
//         <Text>This is Screen B</Text>
//       </View>
//     )
//   }
// }

// const Nav = createStackNavigator({
//   screenA: A,
//   screenB: B
// })

// class App extends Component {
//   render() {
//     return (
//       <View>
//         <Nav />
//       </View>
//     )
//   }
// }
// ---------------------------------------------------------

Storage, Firebase


Cloud Firestore
// 検索が容易
{
    User: {
        [それぞれのユーザーID]: {
            name: '',
            local: [自分で作ったデッキのID一覧],
            favorite: [お気に入りのデッキのID一覧],
            recent: [最近見たデッキのID一覧],
            background: [ユーザーアイコンの背景]
        },
        [ユーザーID]: {...},
        .
        .
        .
    }, 
    Deck: {
        [それぞれのデッキID]: {
            th: [サムネイルに関する情報],
            ti: [タイトルに関する情報],
            lang1: [母国語],
            lang2: [学ぶ言語],
            user: [作成者のユーザーID]
            .
            .
            .
        }
    },
//    Word: {
//        apple: {
//            def: [リンゴ, 林檎, ],
//            ie: ['~~~~~~~', '~~~~~~']
//        }
//    }
}

Realtime Database
// 小さくて頻繁に取り出すデータ
{
    Deck: {
        [デッキのID]: {
            up: ,
            v:
            rate: 
        }
    }
}

Firebase Storage
// 大きいデータ


Deckに関する情報
    再生回数とか、評価とか、最終更新日とか頻繁に更新する小さいデータ
    　＞Realtime databaseに保存されてて、ローカルには残されてない
    デッキ情報（作成者とか、サムネイルとか、)
    　＞Firestoreに保存されている。ローカルのStorageにも保存されてる。
    具体的な単語データ
    　＞今のところ、Firebase Storageに保存する予定
    const deck = Deck.load({ deckid: [デッキのID ]});

Userに関する情報
    再生回数とか、最終更新日とか頻繁に更新する小さいデータ
    　＞Realtime databaseに保存されてて、ローカルには残されてない
    ユーザー情報（お気に入りのデッキのID、自分のデッキのIDなど)
    　＞Firestoreに保存されている。ローカルのStorageにも保存されてる。
    ユーザーアイコンの画像など
    　＞Firebase Storageに保存する予定
    const user = User.load({ uid: [ユーザーのID] });
    
自分しかしれない情報（emailなど）
    　＞Userとは別に保存
    Fire auth, (firestoreとかとは違う)
    ローカルStorageにもkeyがUserではなく、authとして保存
    const auth = Storage.Function.load({ key: 'auth' });


ArrayとObjectについて
Array ~ 配列
    const array = ['リンゴ', 'バナナ', 'パイナップル','ドラゴンフルーツ']
    console.log(array[0]) > リンゴ
    console.log(array[1]) > バナナ
    console.log(array[2]) > パイナップル

    array.push('ぶどう') 追加する
    javascript 配列って調べれば出てくる
    
Object ~ オブジェクト
    const object = [
        string: 'value',
        num: π,
        function: () => {
            console.log('daijfdaiojfida');
        },
        function2: () => console.log('message'),
        array = [1, 2, 3],
    ]

    console.log(object.string) > value
    console.log(object.num) > π
    object.function() > daijfdaiojfida
    object.function2() > message
    console.log(array[1]) > 2

console.log(Object.values(object))
['value', π, ()=>{console.log()} ...]

console.log(Object.keys(object));
['string', 'num', 'function', 'function2', 'array']

// ------------------------------------

local: {
    deck: {
        [ID]: true,
        [別のID]: true
    }
}

// ------------------------------------

mergeについて
mergeする場合
const object1 = {
    key1: 1,
    key2: 'value2',
    key3: [ 1, 2, 3 ]
}
const object2 = {
    key4: 4,
    key5: 'value5',
    key6: ['apple', 'grape']
}
object1が現在保存されているデータだとしてobject2が更新内容だとする

object2をマージ　結合・合併される
const object3 = {
    key1: 1,
    key2: 'value2',
    key3: [ 1, 2, 3 ],
    key4: 4,
    key5: 'value5',
    key6: ['apple', 'grape']
}
マージせずに更新する場合＞上書き保存される
const object3 = {
    key4: 4,
    key5: 'value5',
    key6: ['apple', 'grape']
}


